from aiogram import F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from app.keyboards import kb
from app.keyboards import ikb

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from services.note_service import NoteDto
from services.pages_service import PagesService
from aiogram.types import CallbackQuery

from aiogram.methods.delete_message import DeleteMessage

from enum import Enum
import json
import time


class AddNote(StatesGroup):  # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    name = State()
    content = State()


class DeleteNote(StatesGroup): # –Ω–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    note_id = State()

class EditNote(StatesGroup):  # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    note_id = State()
    content = State()

class SessionState(Enum):
    LOGIN = "login"
    MENU = "menu"
    ADD_NOTE = "add_note"
    NOTES_SCOPE = "notes_scope"
    NOTES_LIST = "notes_list"
    DEL_NOTE = "del_note"
    EDIT_NOTE = "edit_note"


async def setup_handlers(self):
    @self.dp.message(CommandStart())
    async def start_command(message: Message, state: FSMContext):
        await state.clear()
        await self.login(message)
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –¢–≤–æ–π TG ID: {message.from_user.id}. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ç–≤–æ–∏–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏! ",
            reply_markup=kb.main)

    #–û—Ç–º–µ–Ω—è—Ç–æ—Ä –ª—é–±–æ–≥–æ fsmState
    @self.dp.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
    async def cancel_handler(message: Message, state: FSMContext):
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É –Ω–æ–º–µ—Ä–∞–º —Å—Ç—Ä–∞–Ω–∏—Ü
    @self.dp.callback_query(F.data.contains("—Å—Ç—Ä–∞–Ω–∏—Ü–∞"))
    async def page_number(callback: CallbackQuery):
        await callback.answer()

    # —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –∫–Ω–æ–ø–æ—á–∫–∞–º–∏
    @self.dp.message(F.text.contains("üìë"))
    async def inline_list(message:Message):
        pages = PagesService()
        titles = await pages.list(message.from_user.id)
        keyboard = await ikb.gen_inline(titles)
        await message.answer("–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:", reply_markup=keyboard)

        user = await self.user_requests.get(message.from_user.id)  # New —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ç–æ –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–Ω–æ–≤–æ
        user.state = SessionState.NOTES_LIST.value
        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º state

    # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ó–∞–º–µ—Ç–∫–∏ –°–ö–û–ü–û–ú"
    @self.dp.callback_query(lambda callback: callback.data.startswith("nxt_"))
    async def nxt_page(callback: CallbackQuery):
        current_page = int(callback.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        pages = PagesService()
        scope = await pages.list_scope(callback.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
        content = await pages.scope_slice(scope, current_page + 1)  # –ë–µ—Ä—ë–º –Ω—É–∂–Ω—ã–µ
        keyboard = await ikb.gen_inline_scope(scope, current_page=current_page + 1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_text(content, reply_markup=keyboard)
        await callback.answer()


    @self.dp.callback_query(lambda callback: callback.data.startswith("prv_"))
    async def prv_page(callback: CallbackQuery):
        current_page = int(callback.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        pages = PagesService()
        scope = await pages.list_scope(callback.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
        content = await pages.scope_slice(scope, current_page - 1)  # –ë–µ—Ä—ë–º –Ω—É–∂–Ω—ã–µ
        keyboard = await ikb.gen_inline_scope(scope, current_page=current_page - 1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_text(content, reply_markup=keyboard)
        await callback.answer()


    # –£–¥–∞–ª—è—Ç–æ—Ä –§–°–ú —à–∞–≥ 1 –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ NEW
    @self.dp.callback_query(lambda callback: callback.data.startswith("del_"))
    async def del_note(callback: CallbackQuery, state: FSMContext):
        note_id = int(callback.data.split("_")[1])

        user = await self.user_requests.get(callback.from_user.id)  # New —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ç–æ –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–Ω–æ–≤–æ

        user.state = SessionState.DEL_NOTE.value # –º–µ–Ω—è–µ–º state
        user.json_data = json.dumps({"del_note": note_id}, ensure_ascii=False)

        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a

        await state.set_state(DeleteNote.note_id)
        await state.update_data(note_id=note_id)


        await callback.message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?!", reply_markup=kb.delete_button)
        await callback.answer()

    # –§–°–ú —à–∞–≥ 2 –≤ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫
    @self.dp.message(DeleteNote.note_id, F.text.contains("üóëÔ∏è"))
    async def del_note_two(message: Message, state: FSMContext):
        data = await state.get_data()
        await self.note_requests.delete(data["note_id"], message.from_user.id) #–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ
        await message.answer("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=kb.main)

        user = await self.user_requests.get(message.from_user.id)  # New —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ç–æ –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–Ω–æ–≤–æ
        user.json_data = json.dumps({"del_done": data["note_id"]}, ensure_ascii=False)
        user.state = SessionState.MENU.value
        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a

        await state.clear()


    @self.dp.message(DeleteNote.note_id)
    async def del_note_wrong_cmd(message: Message):
        await message.answer('üóëÔ∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"!', reply_markup=kb.delete_button)

    # –ò–∑–º–µ–Ω—è—Ç–æ—Ä –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –§–°–ú —à–∞–≥ 1 NEW
    @self.dp.callback_query(lambda callback: callback.data.startswith("edit_"))
    async def edit_note_one(callback: CallbackQuery, state: FSMContext):
        note_id = int(callback.data.split("_")[1])
        await state.set_state(EditNote.note_id)
        await state.update_data(note_id=note_id)
        data = await state.get_data()

        user = await self.user_requests.get(callback.from_user.id)  # New —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ç–æ –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–Ω–æ–≤–æ
        user.state = SessionState.EDIT_NOTE.value
        #await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a

        json_data = json.dumps({"edit_index": data["note_id"]}, ensure_ascii=False)
        user.json_data = json_data
        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a

        await state.set_state(EditNote.content)  # —Å–ª–µ–¥. —à–∞–Ω input –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:", reply_markup=kb.cancel_button)
        await callback.answer()

    @self.dp.message(EditNote.content)
    async def edit_note_two(message: Message, state: FSMContext):
        await state.update_data(content=message.text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ
        data = await state.get_data()
        user = await self.user_requests.get(message.from_user.id)  # New —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ç–æ –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–Ω–æ–≤–æ
        user.json_data = json.dumps({"edit_done": data["content"]}, ensure_ascii=False)
        note = await self.note_requests.get_note(data["note_id"])  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ—Ç—É –ø–æ note_id
        note.content = data["content"]
        note.updated_at = round(time.time())
        await self.note_requests.update(note)
        user.state = SessionState.MENU.value
        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a
        await message.answer("–ó–∞–º–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=kb.main)
        await state.clear()



    # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –°–ü–ò–°–û–ö –ó–ê–ú–ï–¢–û–ö
    @self.dp.callback_query(lambda callback: callback.data.startswith("next_"))
    async def next_page(callback: CallbackQuery):
        current_page = int(callback.data.split("_")[1])
        cnt = int(callback.data.split("_")[2])
        pages = PagesService()
        titles = await pages.list(callback.from_user.id)
        keyboard = await ikb.gen_inline(titles,current_page=current_page+1,force = True if cnt==1 else False)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()


    @self.dp.callback_query(lambda callback: callback.data.startswith("prev_"))
    async def prev_page(callback: CallbackQuery):
        current_page = int(callback.data.split("_")[1])
        cnt = int(callback.data.split("_")[2])
        pages = PagesService()
        titles = await pages.list(callback.from_user.id)
        keyboard = await ikb.gen_inline(titles, current_page=current_page - 1,force = True if cnt==1 else False)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()


    @self.dp.callback_query(lambda callback: callback.data == "limit")
    async def page_limit(callback: CallbackQuery):
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü")

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–∫–∏
    @self.dp.callback_query(lambda callback: callback.data.startswith("note_"))
    async def note_num(callback: CallbackQuery):
        note_index = int(callback.data.split("_")[1])
        current_page = int(callback.data.split("_")[2])
        note = await self.note_requests.get_note(note_index)  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ—Ç—É –ø–æ note_id
        result = f"<b>üìå {note.title}</b>\nüìÑ {note.content}"
        pages = PagesService()
        titles = await pages.list(callback.from_user.id)
        keyboard = await ikb.gen_inline(titles,current_page=current_page,force=True, note_id=note_index)
        #await callback.message.answer(result, reply_markup=keyboard)
        await callback.message.edit_text(result, reply_markup=keyboard)
        #await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

    # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –§–°–ú
    @self.dp.message(F.text.contains("üìå"))
    async def add_one(message: Message, state: FSMContext):
        user = await self.user_requests.get(message.from_user.id)  # New —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ç–æ –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–Ω–æ–≤–æ
        user.state = SessionState.ADD_NOTE.value
        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a
        await state.set_state(AddNote.name)  # —à–∞–≥ 1 input –∏–º–µ–Ω–∏ –∑–∞–º–µ—Ç–∫–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:",reply_markup=kb.cancel_button)


    @self.dp.message(AddNote.name)  # –ª–æ–≤–∏–º —á—Ç–æ —é–∑–µ—Ä –≤–≤–æ–¥–∏—Ç –∏–º—è
    async def add_two(message: Message, state: FSMContext):
        await state.update_data(name=message.text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ
        user = await self.user_requests.get(message.from_user.id)  # New —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ç–æ –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–Ω–æ–≤–æ
        user.json_data = json.dumps({"add_title": (await state.get_data()).get("name")}, ensure_ascii=False)
        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a
        await state.set_state(AddNote.content)  # —Å–ª–µ–¥. —à–∞–Ω input –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É:",reply_markup=kb.cancel_button)


    @self.dp.message(AddNote.content)  # –ª–æ–≤–∏–º —á—Ç–æ —é–∑–µ—Ä –≤–≤–æ–¥–∏—Ç content
    async def two_three(message: Message, state: FSMContext):
        await state.update_data(content=message.text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ
        data = await state.get_data()  # –¥–æ—Å—Ç–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user = await self.user_requests.get(message.from_user.id)  # New —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ç–æ –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–Ω–æ–≤–æ
        user.json_data = json.dumps({"add_content": data["content"]}, ensure_ascii=False)
        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a
        note = NoteDto(message.from_user.id, data["name"], data["content"])
        await self.note_requests.add(note)

        await message.answer("–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await message.answer(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['name']} \n–ö–æ–Ω—Ç–µ–Ω—Ç: {data['content']}", reply_markup=kb.main)

        user.json_data = json.dumps({"add_done": data["content"]}, ensure_ascii=False)
        user.state = SessionState.MENU.value
        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a
        await state.clear()


    @self.dp.message(F.text.contains("üóíÔ∏è")) #–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏ (–∑–∞–º–µ—Ç–∫–∏ —Å–∫–æ–ø–æ–º)
    async def show(message: Message):
        pages = PagesService()
        scope = await pages.list_scope(message.from_user.id)
        keyboard = await ikb.gen_inline_scope(scope)
        await message.answer(await pages.scope_slice(scope), reply_markup=keyboard)

        user = await self.user_requests.get(message.from_user.id)  # New —Ä–∞—Å–∫–∞—Ç—ã–≤–∞–µ–º –¥—Ç–æ –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–Ω–æ–≤–æ
        user.state = SessionState.NOTES_SCOPE.value
        await self.user_requests.update(user)  # –∞–ø–¥–µ–π—Ç–∏–º user'a

