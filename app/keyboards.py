from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import math
import asyncio
from datetime import datetime

class ReplyKeyboards:


    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    ADD_KEY = "üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
    LIST_KEY = "üóíÔ∏è –ó–∞–º–µ—Ç–∫–∏ —Å–∫–æ–ø–æ–º"
    INLINE_LIST_KEY = "üìë –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"
    CANCEL_KEY = "–û—Ç–º–µ–Ω–∏—Ç—å"
    DELETE_KEY = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    main = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text=ADD_KEY)],
        [KeyboardButton(text=INLINE_LIST_KEY), KeyboardButton(text=LIST_KEY)]
    ], resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...")


    cancel_button = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=CANCEL_KEY)]], resize_keyboard=True)
    delete_button = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=DELETE_KEY), KeyboardButton(text=CANCEL_KEY)]], resize_keyboard=True)


class InlineKeyboards:
    async def gen_inline(self,titles,current_page = 1, force = False, note_id = 0):
        page_max = 5 #–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        cnt = 0
        head_row = None
        if force:
            page_max = 3
            head_row = [
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{note_id}"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{note_id}")
            ]
            cnt = 1
        page_number = math.ceil(len(titles) / page_max)  # —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=f"üìã {title}", callback_data=f"note_{note_id}_{current_page}")] for title, note_id in titles[page_max*current_page-page_max:page_max*current_page]]
        )

        # –ù–æ–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        footer_row = [
            InlineKeyboardButton(text="<-", callback_data=f"prev_{current_page}_{cnt}" if current_page>1 else "limit"),
            InlineKeyboardButton(text=f"{current_page}/{page_number} —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="—Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
            InlineKeyboardButton(text="->", callback_data=f"next_{current_page}_{cnt}" if current_page<page_number else "limit")
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        if head_row:
            keyboard.inline_keyboard.insert(0, head_row)
        keyboard.inline_keyboard.append(footer_row)
        return keyboard


    async def gen_inline_scope(self,scope, current_page=1):
        notes_max = 10 # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_number = math.ceil(scope.count("<b>") / notes_max)  # —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        new_row = [
            InlineKeyboardButton(text="<-", callback_data=f"prv_{current_page}" if current_page>1 else "limit"),
            InlineKeyboardButton(text=f"{current_page}/{page_number} —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="—Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
            InlineKeyboardButton(text="->", callback_data=f"nxt_{current_page}" if current_page<page_number else "limit")
        ]

        keyboard.inline_keyboard.append(new_row)
        return keyboard

kb = ReplyKeyboards()
ikb = InlineKeyboards()
